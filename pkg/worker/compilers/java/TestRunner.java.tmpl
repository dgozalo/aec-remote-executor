public class TestsRunner {
    public static void main(String[] args) {
        if (args.length == 0) {
            throw new RuntimeException("Test runner requires a path to a file with test cases");
        }

        String testsFilePath = args[0];
        if (testsFilePath == null || testsFilePath.isEmpty()) {
            throw new RuntimeException("The path to the test file is empty or null");
        }

        TestsRunner runner = new TestsRunner();
        Solution solution = new Solution();

        runTestCases(solution, runner, testsFilePath);
    }

    public void writeResultToTestsFile(String filePath, String result) {
        //write to a file
        java.io.File testsFile = new java.io.File(filePath);
        if (!testsFile.exists()) {
            throw new RuntimeException("Test File does not exist");
        }
        if (!testsFile.canWrite()) {
            throw new RuntimeException("Test File is not writable");
        }
        try (java.io.FileWriter fileWriter = new java.io.FileWriter(testsFile, true);
             java.io.BufferedWriter bufferedWriter = new java.io.BufferedWriter(fileWriter)) {
            bufferedWriter.write(result);
            bufferedWriter.newLine();
        } catch (java.io.IOException e) {
            throw new RuntimeException("Error writing to file", e);
        }
    }

{{ .TestRunnerCode }}
}

class Test<I, T, E> {
    private I input;
    private T target;
    private E expectedOutput;

    public Test(I input, T target, E expectedOutput) {
        this.input = input;
        this.target = target;
        this.expectedOutput = expectedOutput;
    }

    public I getInput() {
        return input;
    }

    public void setInput(I input) {
        this.input = input;
    }

    public T getTarget() {
        return target;
    }

    public void setTarget(T target) {
        this.target = target;
    }

    public E getExpectedOutput() {
        return expectedOutput;
    }

    public void setExpectedOutput(E expectedOutput) {
        this.expectedOutput = expectedOutput;
    }
}

class Solution {
{{ .SubmittedCode }}
}

