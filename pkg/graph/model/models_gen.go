// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Alumni struct {
	ID             string        `json:"id"`
	FirstName      string        `json:"first_name"`
	LastName       string        `json:"last_name"`
	Email          string        `json:"email"`
	GraduationYear string        `json:"graduation_year"`
	Subjects       []*Subject    `json:"subjects,omitempty"`
	Assignments    []*Assignment `json:"assignments,omitempty"`
}

type Assignment struct {
	ID                      string                    `json:"id"`
	Title                   string                    `json:"title"`
	Description             string                    `json:"description"`
	AssignmentExamples      []*AssignmentExample      `json:"assignment_examples,omitempty"`
	AssignmentCodeTemplates []*AssignmentCodeTemplate `json:"assignment_code_templates,omitempty"`
	Subject                 *Subject                  `json:"subject"`
	Professor               *Professor                `json:"professor"`
	Alumni                  []*Alumni                 `json:"alumni,omitempty"`
}

type AssignmentCodeTemplate struct {
	ID       string `json:"id"`
	Language string `json:"language"`
	Code     string `json:"code"`
}

type AssignmentExample struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

type Execution struct {
	ID           string `json:"id"`
	Language     string `json:"language"`
	Code         string `json:"code"`
	AssignmentID string `json:"assignmentId"`
}

type ExecutionResult struct {
	Stdout      string          `json:"stdout"`
	Stderr      string          `json:"stderr"`
	TestResults []*TestResult   `json:"testResults,omitempty"`
	Status      ExecutionStatus `json:"status"`
}

type NewExecution struct {
	Language     string `json:"language"`
	Code         string `json:"code"`
	AssignmentID string `json:"assignmentId"`
}

type Professor struct {
	ID          string        `json:"id"`
	FirstName   string        `json:"first_name"`
	LastName    string        `json:"last_name"`
	Email       string        `json:"email"`
	Subjects    []*Subject    `json:"subjects,omitempty"`
	Assignments []*Assignment `json:"assignments,omitempty"`
}

type Subject struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Semester    int           `json:"semester"`
	Professor   *Professor    `json:"professor"`
	Assignments []*Assignment `json:"assignments,omitempty"`
}

type TestResult struct {
	TestName string `json:"testName"`
	Expected string `json:"expected"`
	Actual   string `json:"actual"`
	Passed   bool   `json:"passed"`
}

type ExecutionStatus string

const (
	ExecutionStatusRunning   ExecutionStatus = "RUNNING"
	ExecutionStatusCompleted ExecutionStatus = "COMPLETED"
	ExecutionStatusError     ExecutionStatus = "ERROR"
)

var AllExecutionStatus = []ExecutionStatus{
	ExecutionStatusRunning,
	ExecutionStatusCompleted,
	ExecutionStatusError,
}

func (e ExecutionStatus) IsValid() bool {
	switch e {
	case ExecutionStatusRunning, ExecutionStatusCompleted, ExecutionStatusError:
		return true
	}
	return false
}

func (e ExecutionStatus) String() string {
	return string(e)
}

func (e *ExecutionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExecutionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExecutionStatus", str)
	}
	return nil
}

func (e ExecutionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
